// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _d_sigmoid_HH_
#define _d_sigmoid_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "d_sigmoid_dsub_64bkb.h"
#include "d_sigmoid_dmul_64cud.h"

namespace ap_rtl {

struct d_sigmoid : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > layer_input_address0;
    sc_out< sc_logic > layer_input_ce0;
    sc_out< sc_logic > layer_input_we0;
    sc_out< sc_lv<64> > layer_input_d0;
    sc_in< sc_lv<64> > layer_input_q0;
    sc_out< sc_lv<3> > layer_input_address1;
    sc_out< sc_logic > layer_input_ce1;
    sc_out< sc_logic > layer_input_we1;
    sc_out< sc_lv<64> > layer_input_d1;
    sc_in< sc_lv<64> > layer_input_q1;
    sc_out< sc_lv<3> > layer_output_address0;
    sc_out< sc_logic > layer_output_ce0;
    sc_in< sc_lv<64> > layer_output_q0;
    sc_out< sc_lv<3> > layer_output_address1;
    sc_out< sc_logic > layer_output_ce1;
    sc_in< sc_lv<64> > layer_output_q1;
    sc_out< sc_lv<3> > layer_derivative_address0;
    sc_out< sc_logic > layer_derivative_ce0;
    sc_out< sc_logic > layer_derivative_we0;
    sc_out< sc_lv<64> > layer_derivative_d0;
    sc_out< sc_lv<3> > layer_derivative_address1;
    sc_out< sc_logic > layer_derivative_ce1;
    sc_out< sc_logic > layer_derivative_we1;
    sc_out< sc_lv<64> > layer_derivative_d1;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<64> > ap_var_for_const0;


    // Module declarations
    d_sigmoid(sc_module_name name);
    SC_HAS_PROCESS(d_sigmoid);

    ~d_sigmoid();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    d_sigmoid_dsub_64bkb<1,5,64,64,64>* d_sigmoid_dsub_64bkb_U1;
    d_sigmoid_dsub_64bkb<1,5,64,64,64>* d_sigmoid_dsub_64bkb_U2;
    d_sigmoid_dmul_64cud<1,5,64,64,64>* d_sigmoid_dmul_64cud_U3;
    d_sigmoid_dmul_64cud<1,5,64,64,64>* d_sigmoid_dmul_64cud_U4;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state4_pp0_stage3_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage3_iter1;
    sc_signal< bool > ap_block_state12_pp0_stage3_iter2;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<64> > grp_fu_216_p2;
    sc_signal< sc_lv<64> > reg_224;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage2_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage2_iter2;
    sc_signal< bool > ap_block_state15_pp0_stage2_iter3;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state10_pp0_stage1_iter2;
    sc_signal< bool > ap_block_state14_pp0_stage1_iter3;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<64> > grp_fu_220_p2;
    sc_signal< sc_lv<64> > reg_229;
    sc_signal< sc_lv<64> > layer_output_load_reg_244;
    sc_signal< sc_lv<64> > layer_output_load_reg_244_pp0_iter1_reg;
    sc_signal< sc_lv<64> > layer_output_load_1_reg_250;
    sc_signal< sc_lv<64> > layer_output_load_1_reg_250_pp0_iter1_reg;
    sc_signal< sc_lv<64> > layer_output_load_2_reg_266;
    sc_signal< sc_lv<64> > layer_output_load_2_reg_266_pp0_iter1_reg;
    sc_signal< sc_lv<64> > layer_output_load_3_reg_272;
    sc_signal< sc_lv<64> > layer_output_load_3_reg_272_pp0_iter1_reg;
    sc_signal< sc_lv<64> > layer_output_load_4_reg_288;
    sc_signal< sc_lv<64> > layer_output_load_4_reg_288_pp0_iter1_reg;
    sc_signal< sc_lv<64> > layer_output_load_5_reg_294;
    sc_signal< sc_lv<64> > layer_output_load_5_reg_294_pp0_iter1_reg;
    sc_signal< sc_lv<64> > layer_output_load_6_reg_310;
    sc_signal< sc_lv<64> > layer_output_load_6_reg_310_pp0_iter2_reg;
    sc_signal< sc_lv<64> > layer_output_load_7_reg_316;
    sc_signal< sc_lv<64> > layer_output_load_7_reg_316_pp0_iter2_reg;
    sc_signal< sc_lv<64> > grp_fu_204_p2;
    sc_signal< sc_lv<64> > tmp_reg_322;
    sc_signal< sc_lv<64> > grp_fu_210_p2;
    sc_signal< sc_lv<64> > tmp_s_reg_327;
    sc_signal< sc_lv<64> > tmp_2_reg_332;
    sc_signal< sc_lv<64> > tmp_3_reg_337;
    sc_signal< sc_lv<64> > tmp_4_reg_342;
    sc_signal< sc_lv<64> > tmp_5_reg_347;
    sc_signal< sc_lv<64> > tmp_6_reg_352;
    sc_signal< sc_lv<64> > tmp_7_reg_357;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<64> > grp_fu_216_p0;
    sc_signal< sc_lv<64> > grp_fu_216_p1;
    sc_signal< sc_lv<64> > grp_fu_220_p0;
    sc_signal< sc_lv<64> > grp_fu_220_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_idle_pp0_1to3;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_idle_pp0_0to2;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage3;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_3FF0000000000000;
    static const sc_lv<3> ap_const_lv3_0;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_state10_pp0_stage1_iter2();
    void thread_ap_block_state11_pp0_stage2_iter2();
    void thread_ap_block_state12_pp0_stage3_iter2();
    void thread_ap_block_state13_pp0_stage0_iter3();
    void thread_ap_block_state14_pp0_stage1_iter3();
    void thread_ap_block_state15_pp0_stage2_iter3();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage3_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state6_pp0_stage1_iter1();
    void thread_ap_block_state7_pp0_stage2_iter1();
    void thread_ap_block_state8_pp0_stage3_iter1();
    void thread_ap_block_state9_pp0_stage0_iter2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to2();
    void thread_ap_idle_pp0_1to3();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_grp_fu_216_p0();
    void thread_grp_fu_216_p1();
    void thread_grp_fu_220_p0();
    void thread_grp_fu_220_p1();
    void thread_layer_derivative_address0();
    void thread_layer_derivative_address1();
    void thread_layer_derivative_ce0();
    void thread_layer_derivative_ce1();
    void thread_layer_derivative_d0();
    void thread_layer_derivative_d1();
    void thread_layer_derivative_we0();
    void thread_layer_derivative_we1();
    void thread_layer_input_address0();
    void thread_layer_input_address1();
    void thread_layer_input_ce0();
    void thread_layer_input_ce1();
    void thread_layer_input_d0();
    void thread_layer_input_d1();
    void thread_layer_input_we0();
    void thread_layer_input_we1();
    void thread_layer_output_address0();
    void thread_layer_output_address1();
    void thread_layer_output_ce0();
    void thread_layer_output_ce1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
