// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "d_sigmoid.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic d_sigmoid::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic d_sigmoid::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> d_sigmoid::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<4> d_sigmoid::ap_ST_fsm_pp0_stage1 = "10";
const sc_lv<4> d_sigmoid::ap_ST_fsm_pp0_stage2 = "100";
const sc_lv<4> d_sigmoid::ap_ST_fsm_pp0_stage3 = "1000";
const sc_lv<32> d_sigmoid::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool d_sigmoid::ap_const_boolean_1 = true;
const sc_lv<32> d_sigmoid::ap_const_lv32_3 = "11";
const bool d_sigmoid::ap_const_boolean_0 = false;
const sc_lv<32> d_sigmoid::ap_const_lv32_2 = "10";
const sc_lv<32> d_sigmoid::ap_const_lv32_1 = "1";
const sc_lv<64> d_sigmoid::ap_const_lv64_1 = "1";
const sc_lv<64> d_sigmoid::ap_const_lv64_2 = "10";
const sc_lv<64> d_sigmoid::ap_const_lv64_3 = "11";
const sc_lv<64> d_sigmoid::ap_const_lv64_4 = "100";
const sc_lv<64> d_sigmoid::ap_const_lv64_5 = "101";
const sc_lv<64> d_sigmoid::ap_const_lv64_6 = "110";
const sc_lv<64> d_sigmoid::ap_const_lv64_7 = "111";
const sc_lv<64> d_sigmoid::ap_const_lv64_8 = "1000";
const sc_lv<64> d_sigmoid::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> d_sigmoid::ap_const_lv64_3FF0000000000000 = "11111111110000000000000000000000000000000000000000000000000000";
const sc_lv<3> d_sigmoid::ap_const_lv3_0 = "000";

d_sigmoid::d_sigmoid(sc_module_name name) : sc_module(name), mVcdFile(0) {
    d_sigmoid_dsub_64bkb_U1 = new d_sigmoid_dsub_64bkb<1,5,64,64,64>("d_sigmoid_dsub_64bkb_U1");
    d_sigmoid_dsub_64bkb_U1->clk(ap_clk);
    d_sigmoid_dsub_64bkb_U1->reset(ap_rst);
    d_sigmoid_dsub_64bkb_U1->din0(ap_var_for_const0);
    d_sigmoid_dsub_64bkb_U1->din1(layer_output_q0);
    d_sigmoid_dsub_64bkb_U1->ce(ap_var_for_const1);
    d_sigmoid_dsub_64bkb_U1->dout(grp_fu_204_p2);
    d_sigmoid_dsub_64bkb_U2 = new d_sigmoid_dsub_64bkb<1,5,64,64,64>("d_sigmoid_dsub_64bkb_U2");
    d_sigmoid_dsub_64bkb_U2->clk(ap_clk);
    d_sigmoid_dsub_64bkb_U2->reset(ap_rst);
    d_sigmoid_dsub_64bkb_U2->din0(ap_var_for_const0);
    d_sigmoid_dsub_64bkb_U2->din1(layer_output_q1);
    d_sigmoid_dsub_64bkb_U2->ce(ap_var_for_const1);
    d_sigmoid_dsub_64bkb_U2->dout(grp_fu_210_p2);
    d_sigmoid_dmul_64cud_U3 = new d_sigmoid_dmul_64cud<1,5,64,64,64>("d_sigmoid_dmul_64cud_U3");
    d_sigmoid_dmul_64cud_U3->clk(ap_clk);
    d_sigmoid_dmul_64cud_U3->reset(ap_rst);
    d_sigmoid_dmul_64cud_U3->din0(grp_fu_216_p0);
    d_sigmoid_dmul_64cud_U3->din1(grp_fu_216_p1);
    d_sigmoid_dmul_64cud_U3->ce(ap_var_for_const1);
    d_sigmoid_dmul_64cud_U3->dout(grp_fu_216_p2);
    d_sigmoid_dmul_64cud_U4 = new d_sigmoid_dmul_64cud<1,5,64,64,64>("d_sigmoid_dmul_64cud_U4");
    d_sigmoid_dmul_64cud_U4->clk(ap_clk);
    d_sigmoid_dmul_64cud_U4->reset(ap_rst);
    d_sigmoid_dmul_64cud_U4->din0(grp_fu_220_p0);
    d_sigmoid_dmul_64cud_U4->din1(grp_fu_220_p1);
    d_sigmoid_dmul_64cud_U4->ce(ap_var_for_const1);
    d_sigmoid_dmul_64cud_U4->dout(grp_fu_220_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage1_iter2);

    SC_METHOD(thread_ap_block_state11_pp0_stage2_iter2);

    SC_METHOD(thread_ap_block_state12_pp0_stage3_iter2);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state14_pp0_stage1_iter3);

    SC_METHOD(thread_ap_block_state15_pp0_stage2_iter3);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state6_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state7_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state8_pp0_stage3_iter1);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter2);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_reg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_idle_pp0_0to2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_1to3);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to2 );

    SC_METHOD(thread_grp_fu_216_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( layer_output_load_reg_244_pp0_iter1_reg );
    sensitive << ( layer_output_load_2_reg_266_pp0_iter1_reg );
    sensitive << ( layer_output_load_4_reg_288_pp0_iter1_reg );
    sensitive << ( layer_output_load_6_reg_310_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_grp_fu_216_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_reg_322 );
    sensitive << ( tmp_2_reg_332 );
    sensitive << ( tmp_4_reg_342 );
    sensitive << ( tmp_6_reg_352 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_grp_fu_220_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( layer_output_load_1_reg_250_pp0_iter1_reg );
    sensitive << ( layer_output_load_3_reg_272_pp0_iter1_reg );
    sensitive << ( layer_output_load_5_reg_294_pp0_iter1_reg );
    sensitive << ( layer_output_load_7_reg_316_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_grp_fu_220_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_s_reg_327 );
    sensitive << ( tmp_3_reg_337 );
    sensitive << ( tmp_5_reg_347 );
    sensitive << ( tmp_7_reg_357 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_layer_derivative_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_layer_derivative_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_layer_derivative_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_layer_derivative_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_layer_derivative_d0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( reg_224 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_layer_derivative_d1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( reg_229 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_layer_derivative_we0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_layer_derivative_we1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_layer_input_address0);

    SC_METHOD(thread_layer_input_address1);

    SC_METHOD(thread_layer_input_ce0);

    SC_METHOD(thread_layer_input_ce1);

    SC_METHOD(thread_layer_input_d0);

    SC_METHOD(thread_layer_input_d1);

    SC_METHOD(thread_layer_input_we0);

    SC_METHOD(thread_layer_input_we1);

    SC_METHOD(thread_layer_output_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_layer_output_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_layer_output_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_layer_output_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_idle_pp0_1to3 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "d_sigmoid_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, layer_input_address0, "(port)layer_input_address0");
    sc_trace(mVcdFile, layer_input_ce0, "(port)layer_input_ce0");
    sc_trace(mVcdFile, layer_input_we0, "(port)layer_input_we0");
    sc_trace(mVcdFile, layer_input_d0, "(port)layer_input_d0");
    sc_trace(mVcdFile, layer_input_q0, "(port)layer_input_q0");
    sc_trace(mVcdFile, layer_input_address1, "(port)layer_input_address1");
    sc_trace(mVcdFile, layer_input_ce1, "(port)layer_input_ce1");
    sc_trace(mVcdFile, layer_input_we1, "(port)layer_input_we1");
    sc_trace(mVcdFile, layer_input_d1, "(port)layer_input_d1");
    sc_trace(mVcdFile, layer_input_q1, "(port)layer_input_q1");
    sc_trace(mVcdFile, layer_output_address0, "(port)layer_output_address0");
    sc_trace(mVcdFile, layer_output_ce0, "(port)layer_output_ce0");
    sc_trace(mVcdFile, layer_output_q0, "(port)layer_output_q0");
    sc_trace(mVcdFile, layer_output_address1, "(port)layer_output_address1");
    sc_trace(mVcdFile, layer_output_ce1, "(port)layer_output_ce1");
    sc_trace(mVcdFile, layer_output_q1, "(port)layer_output_q1");
    sc_trace(mVcdFile, layer_derivative_address0, "(port)layer_derivative_address0");
    sc_trace(mVcdFile, layer_derivative_ce0, "(port)layer_derivative_ce0");
    sc_trace(mVcdFile, layer_derivative_we0, "(port)layer_derivative_we0");
    sc_trace(mVcdFile, layer_derivative_d0, "(port)layer_derivative_d0");
    sc_trace(mVcdFile, layer_derivative_address1, "(port)layer_derivative_address1");
    sc_trace(mVcdFile, layer_derivative_ce1, "(port)layer_derivative_ce1");
    sc_trace(mVcdFile, layer_derivative_we1, "(port)layer_derivative_we1");
    sc_trace(mVcdFile, layer_derivative_d1, "(port)layer_derivative_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage3_iter0, "ap_block_state4_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage3_iter1, "ap_block_state8_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage3_iter2, "ap_block_state12_pp0_stage3_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, grp_fu_216_p2, "grp_fu_216_p2");
    sc_trace(mVcdFile, reg_224, "reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage2_iter0, "ap_block_state3_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage2_iter1, "ap_block_state7_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage2_iter2, "ap_block_state11_pp0_stage2_iter2");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage2_iter3, "ap_block_state15_pp0_stage2_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter2, "ap_block_state9_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter3, "ap_block_state13_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage1_iter0, "ap_block_state2_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage1_iter1, "ap_block_state6_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage1_iter2, "ap_block_state10_pp0_stage1_iter2");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage1_iter3, "ap_block_state14_pp0_stage1_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, grp_fu_220_p2, "grp_fu_220_p2");
    sc_trace(mVcdFile, reg_229, "reg_229");
    sc_trace(mVcdFile, layer_output_load_reg_244, "layer_output_load_reg_244");
    sc_trace(mVcdFile, layer_output_load_reg_244_pp0_iter1_reg, "layer_output_load_reg_244_pp0_iter1_reg");
    sc_trace(mVcdFile, layer_output_load_1_reg_250, "layer_output_load_1_reg_250");
    sc_trace(mVcdFile, layer_output_load_1_reg_250_pp0_iter1_reg, "layer_output_load_1_reg_250_pp0_iter1_reg");
    sc_trace(mVcdFile, layer_output_load_2_reg_266, "layer_output_load_2_reg_266");
    sc_trace(mVcdFile, layer_output_load_2_reg_266_pp0_iter1_reg, "layer_output_load_2_reg_266_pp0_iter1_reg");
    sc_trace(mVcdFile, layer_output_load_3_reg_272, "layer_output_load_3_reg_272");
    sc_trace(mVcdFile, layer_output_load_3_reg_272_pp0_iter1_reg, "layer_output_load_3_reg_272_pp0_iter1_reg");
    sc_trace(mVcdFile, layer_output_load_4_reg_288, "layer_output_load_4_reg_288");
    sc_trace(mVcdFile, layer_output_load_4_reg_288_pp0_iter1_reg, "layer_output_load_4_reg_288_pp0_iter1_reg");
    sc_trace(mVcdFile, layer_output_load_5_reg_294, "layer_output_load_5_reg_294");
    sc_trace(mVcdFile, layer_output_load_5_reg_294_pp0_iter1_reg, "layer_output_load_5_reg_294_pp0_iter1_reg");
    sc_trace(mVcdFile, layer_output_load_6_reg_310, "layer_output_load_6_reg_310");
    sc_trace(mVcdFile, layer_output_load_6_reg_310_pp0_iter2_reg, "layer_output_load_6_reg_310_pp0_iter2_reg");
    sc_trace(mVcdFile, layer_output_load_7_reg_316, "layer_output_load_7_reg_316");
    sc_trace(mVcdFile, layer_output_load_7_reg_316_pp0_iter2_reg, "layer_output_load_7_reg_316_pp0_iter2_reg");
    sc_trace(mVcdFile, grp_fu_204_p2, "grp_fu_204_p2");
    sc_trace(mVcdFile, tmp_reg_322, "tmp_reg_322");
    sc_trace(mVcdFile, grp_fu_210_p2, "grp_fu_210_p2");
    sc_trace(mVcdFile, tmp_s_reg_327, "tmp_s_reg_327");
    sc_trace(mVcdFile, tmp_2_reg_332, "tmp_2_reg_332");
    sc_trace(mVcdFile, tmp_3_reg_337, "tmp_3_reg_337");
    sc_trace(mVcdFile, tmp_4_reg_342, "tmp_4_reg_342");
    sc_trace(mVcdFile, tmp_5_reg_347, "tmp_5_reg_347");
    sc_trace(mVcdFile, tmp_6_reg_352, "tmp_6_reg_352");
    sc_trace(mVcdFile, tmp_7_reg_357, "tmp_7_reg_357");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_reg, "ap_enable_reg_pp0_iter0_reg");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, grp_fu_216_p0, "grp_fu_216_p0");
    sc_trace(mVcdFile, grp_fu_216_p1, "grp_fu_216_p1");
    sc_trace(mVcdFile, grp_fu_220_p0, "grp_fu_220_p0");
    sc_trace(mVcdFile, grp_fu_220_p1, "grp_fu_220_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_idle_pp0_1to3, "ap_idle_pp0_1to3");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_idle_pp0_0to2, "ap_idle_pp0_0to2");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("d_sigmoid.hdltvin.dat");
    mHdltvoutHandle.open("d_sigmoid.hdltvout.dat");
}

d_sigmoid::~d_sigmoid() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete d_sigmoid_dsub_64bkb_U1;
    delete d_sigmoid_dsub_64bkb_U2;
    delete d_sigmoid_dmul_64cud_U3;
    delete d_sigmoid_dmul_64cud_U4;
}

void d_sigmoid::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void d_sigmoid::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv64_3FF0000000000000;
}

void d_sigmoid::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_reg = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        layer_output_load_1_reg_250 = layer_output_q1.read();
        layer_output_load_reg_244 = layer_output_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        layer_output_load_1_reg_250_pp0_iter1_reg = layer_output_load_1_reg_250.read();
        layer_output_load_reg_244_pp0_iter1_reg = layer_output_load_reg_244.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        layer_output_load_2_reg_266 = layer_output_q0.read();
        layer_output_load_3_reg_272 = layer_output_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        layer_output_load_2_reg_266_pp0_iter1_reg = layer_output_load_2_reg_266.read();
        layer_output_load_3_reg_272_pp0_iter1_reg = layer_output_load_3_reg_272.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        layer_output_load_4_reg_288 = layer_output_q0.read();
        layer_output_load_5_reg_294 = layer_output_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        layer_output_load_4_reg_288_pp0_iter1_reg = layer_output_load_4_reg_288.read();
        layer_output_load_5_reg_294_pp0_iter1_reg = layer_output_load_5_reg_294.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        layer_output_load_6_reg_310 = layer_output_q0.read();
        layer_output_load_7_reg_316 = layer_output_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        layer_output_load_6_reg_310_pp0_iter2_reg = layer_output_load_6_reg_310.read();
        layer_output_load_7_reg_316_pp0_iter2_reg = layer_output_load_7_reg_316.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        reg_224 = grp_fu_216_p2.read();
        reg_229 = grp_fu_220_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        tmp_2_reg_332 = grp_fu_204_p2.read();
        tmp_3_reg_337 = grp_fu_210_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        tmp_4_reg_342 = grp_fu_204_p2.read();
        tmp_5_reg_347 = grp_fu_210_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_6_reg_352 = grp_fu_204_p2.read();
        tmp_7_reg_357 = grp_fu_210_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        tmp_reg_322 = grp_fu_204_p2.read();
        tmp_s_reg_327 = grp_fu_210_p2.read();
    }
}

void d_sigmoid::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void d_sigmoid::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[1];
}

void d_sigmoid::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[2];
}

void d_sigmoid::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[3];
}

void d_sigmoid::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void d_sigmoid::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void d_sigmoid::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state10_pp0_stage1_iter2() {
    ap_block_state10_pp0_stage1_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state11_pp0_stage2_iter2() {
    ap_block_state11_pp0_stage2_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state12_pp0_stage3_iter2() {
    ap_block_state12_pp0_stage3_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state13_pp0_stage0_iter3() {
    ap_block_state13_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state14_pp0_stage1_iter3() {
    ap_block_state14_pp0_stage1_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state15_pp0_stage2_iter3() {
    ap_block_state15_pp0_stage2_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void d_sigmoid::thread_ap_block_state2_pp0_stage1_iter0() {
    ap_block_state2_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state3_pp0_stage2_iter0() {
    ap_block_state3_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state4_pp0_stage3_iter0() {
    ap_block_state4_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state6_pp0_stage1_iter1() {
    ap_block_state6_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state7_pp0_stage2_iter1() {
    ap_block_state7_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state8_pp0_stage3_iter1() {
    ap_block_state8_pp0_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_block_state9_pp0_stage0_iter2() {
    ap_block_state9_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void d_sigmoid::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void d_sigmoid::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = ap_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg.read();
    }
}

void d_sigmoid::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_idle_pp0_0to2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0_0to2 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to2 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_idle_pp0_1to3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0_1to3 = ap_const_logic_1;
    } else {
        ap_idle_pp0_1to3 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to2.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_grp_fu_216_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        grp_fu_216_p0 = layer_output_load_6_reg_310_pp0_iter2_reg.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        grp_fu_216_p0 = layer_output_load_4_reg_288_pp0_iter1_reg.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        grp_fu_216_p0 = layer_output_load_2_reg_266_pp0_iter1_reg.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        grp_fu_216_p0 = layer_output_load_reg_244_pp0_iter1_reg.read();
    } else {
        grp_fu_216_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void d_sigmoid::thread_grp_fu_216_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        grp_fu_216_p1 = tmp_6_reg_352.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        grp_fu_216_p1 = tmp_4_reg_342.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        grp_fu_216_p1 = tmp_2_reg_332.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        grp_fu_216_p1 = tmp_reg_322.read();
    } else {
        grp_fu_216_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void d_sigmoid::thread_grp_fu_220_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        grp_fu_220_p0 = layer_output_load_7_reg_316_pp0_iter2_reg.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        grp_fu_220_p0 = layer_output_load_5_reg_294_pp0_iter1_reg.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        grp_fu_220_p0 = layer_output_load_3_reg_272_pp0_iter1_reg.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        grp_fu_220_p0 = layer_output_load_1_reg_250_pp0_iter1_reg.read();
    } else {
        grp_fu_220_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void d_sigmoid::thread_grp_fu_220_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        grp_fu_220_p1 = tmp_7_reg_357.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        grp_fu_220_p1 = tmp_5_reg_347.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        grp_fu_220_p1 = tmp_3_reg_337.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        grp_fu_220_p1 = tmp_s_reg_327.read();
    } else {
        grp_fu_220_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void d_sigmoid::thread_layer_derivative_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        layer_derivative_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        layer_derivative_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        layer_derivative_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        layer_derivative_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        layer_derivative_address0 =  (sc_lv<3>) ("XXX");
    }
}

void d_sigmoid::thread_layer_derivative_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        layer_derivative_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        layer_derivative_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        layer_derivative_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        layer_derivative_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        layer_derivative_address1 =  (sc_lv<3>) ("XXX");
    }
}

void d_sigmoid::thread_layer_derivative_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read())))) {
        layer_derivative_ce0 = ap_const_logic_1;
    } else {
        layer_derivative_ce0 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_derivative_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read())))) {
        layer_derivative_ce1 = ap_const_logic_1;
    } else {
        layer_derivative_ce1 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_derivative_d0() {
    layer_derivative_d0 = reg_224.read();
}

void d_sigmoid::thread_layer_derivative_d1() {
    layer_derivative_d1 = reg_229.read();
}

void d_sigmoid::thread_layer_derivative_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read())))) {
        layer_derivative_we0 = ap_const_logic_1;
    } else {
        layer_derivative_we0 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_derivative_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read())))) {
        layer_derivative_we1 = ap_const_logic_1;
    } else {
        layer_derivative_we1 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_input_address0() {
    layer_input_address0 = ap_const_lv3_0;
}

void d_sigmoid::thread_layer_input_address1() {
    layer_input_address1 = ap_const_lv3_0;
}

void d_sigmoid::thread_layer_input_ce0() {
    layer_input_ce0 = ap_const_logic_0;
}

void d_sigmoid::thread_layer_input_ce1() {
    layer_input_ce1 = ap_const_logic_0;
}

void d_sigmoid::thread_layer_input_d0() {
    layer_input_d0 = ap_const_lv64_0;
}

void d_sigmoid::thread_layer_input_d1() {
    layer_input_d1 = ap_const_lv64_0;
}

void d_sigmoid::thread_layer_input_we0() {
    layer_input_we0 = ap_const_logic_0;
}

void d_sigmoid::thread_layer_input_we1() {
    layer_input_we1 = ap_const_logic_0;
}

void d_sigmoid::thread_layer_output_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            layer_output_address0 =  (sc_lv<3>) (ap_const_lv64_7);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            layer_output_address0 =  (sc_lv<3>) (ap_const_lv64_5);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            layer_output_address0 =  (sc_lv<3>) (ap_const_lv64_3);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            layer_output_address0 =  (sc_lv<3>) (ap_const_lv64_1);
        } else {
            layer_output_address0 =  (sc_lv<3>) ("XXX");
        }
    } else {
        layer_output_address0 =  (sc_lv<3>) ("XXX");
    }
}

void d_sigmoid::thread_layer_output_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            layer_output_address1 =  (sc_lv<3>) (ap_const_lv64_8);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            layer_output_address1 =  (sc_lv<3>) (ap_const_lv64_6);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            layer_output_address1 =  (sc_lv<3>) (ap_const_lv64_4);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            layer_output_address1 =  (sc_lv<3>) (ap_const_lv64_2);
        } else {
            layer_output_address1 =  (sc_lv<3>) ("XXX");
        }
    } else {
        layer_output_address1 =  (sc_lv<3>) ("XXX");
    }
}

void d_sigmoid::thread_layer_output_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        layer_output_ce0 = ap_const_logic_1;
    } else {
        layer_output_ce0 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_output_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        layer_output_ce1 = ap_const_logic_1;
    } else {
        layer_output_ce1 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_1to3.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void d_sigmoid::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_address0\" :  \"" << layer_input_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_ce0\" :  \"" << layer_input_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_we0\" :  \"" << layer_input_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_d0\" :  \"" << layer_input_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"layer_input_q0\" :  \"" << layer_input_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_address1\" :  \"" << layer_input_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_ce1\" :  \"" << layer_input_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_we1\" :  \"" << layer_input_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_d1\" :  \"" << layer_input_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"layer_input_q1\" :  \"" << layer_input_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_output_address0\" :  \"" << layer_output_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_output_ce0\" :  \"" << layer_output_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"layer_output_q0\" :  \"" << layer_output_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_output_address1\" :  \"" << layer_output_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_output_ce1\" :  \"" << layer_output_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"layer_output_q1\" :  \"" << layer_output_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_address0\" :  \"" << layer_derivative_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_ce0\" :  \"" << layer_derivative_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_we0\" :  \"" << layer_derivative_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_d0\" :  \"" << layer_derivative_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_address1\" :  \"" << layer_derivative_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_ce1\" :  \"" << layer_derivative_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_we1\" :  \"" << layer_derivative_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_d1\" :  \"" << layer_derivative_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

