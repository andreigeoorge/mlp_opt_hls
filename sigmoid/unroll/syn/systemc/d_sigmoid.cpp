// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "d_sigmoid.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic d_sigmoid::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic d_sigmoid::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<15> d_sigmoid::ap_ST_fsm_state1 = "1";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state2 = "10";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state3 = "100";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state4 = "1000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state5 = "10000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state6 = "100000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state7 = "1000000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state8 = "10000000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state9 = "100000000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state10 = "1000000000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state11 = "10000000000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state12 = "100000000000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<15> d_sigmoid::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> d_sigmoid::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> d_sigmoid::ap_const_lv32_A = "1010";
const sc_lv<32> d_sigmoid::ap_const_lv32_B = "1011";
const sc_lv<32> d_sigmoid::ap_const_lv32_C = "1100";
const sc_lv<32> d_sigmoid::ap_const_lv32_D = "1101";
const sc_lv<32> d_sigmoid::ap_const_lv32_1 = "1";
const sc_lv<32> d_sigmoid::ap_const_lv32_2 = "10";
const sc_lv<32> d_sigmoid::ap_const_lv32_3 = "11";
const sc_lv<32> d_sigmoid::ap_const_lv32_4 = "100";
const sc_lv<32> d_sigmoid::ap_const_lv32_5 = "101";
const sc_lv<32> d_sigmoid::ap_const_lv32_6 = "110";
const sc_lv<32> d_sigmoid::ap_const_lv32_7 = "111";
const sc_lv<32> d_sigmoid::ap_const_lv32_8 = "1000";
const sc_lv<64> d_sigmoid::ap_const_lv64_1 = "1";
const sc_lv<64> d_sigmoid::ap_const_lv64_2 = "10";
const sc_lv<64> d_sigmoid::ap_const_lv64_3 = "11";
const sc_lv<64> d_sigmoid::ap_const_lv64_4 = "100";
const sc_lv<64> d_sigmoid::ap_const_lv64_5 = "101";
const sc_lv<64> d_sigmoid::ap_const_lv64_6 = "110";
const sc_lv<64> d_sigmoid::ap_const_lv64_7 = "111";
const sc_lv<64> d_sigmoid::ap_const_lv64_8 = "1000";
const sc_lv<64> d_sigmoid::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> d_sigmoid::ap_const_lv32_E = "1110";
const sc_lv<64> d_sigmoid::ap_const_lv64_3FF0000000000000 = "11111111110000000000000000000000000000000000000000000000000000";
const sc_lv<32> d_sigmoid::ap_const_lv32_9 = "1001";
const sc_lv<3> d_sigmoid::ap_const_lv3_0 = "000";
const bool d_sigmoid::ap_const_boolean_1 = true;

d_sigmoid::d_sigmoid(sc_module_name name) : sc_module(name), mVcdFile(0) {
    d_sigmoid_dsub_64bkb_U1 = new d_sigmoid_dsub_64bkb<1,5,64,64,64>("d_sigmoid_dsub_64bkb_U1");
    d_sigmoid_dsub_64bkb_U1->clk(ap_clk);
    d_sigmoid_dsub_64bkb_U1->reset(ap_rst);
    d_sigmoid_dsub_64bkb_U1->din0(ap_var_for_const0);
    d_sigmoid_dsub_64bkb_U1->din1(layer_output_q0);
    d_sigmoid_dsub_64bkb_U1->ce(ap_var_for_const1);
    d_sigmoid_dsub_64bkb_U1->dout(grp_fu_194_p2);
    d_sigmoid_dsub_64bkb_U2 = new d_sigmoid_dsub_64bkb<1,5,64,64,64>("d_sigmoid_dsub_64bkb_U2");
    d_sigmoid_dsub_64bkb_U2->clk(ap_clk);
    d_sigmoid_dsub_64bkb_U2->reset(ap_rst);
    d_sigmoid_dsub_64bkb_U2->din0(ap_var_for_const0);
    d_sigmoid_dsub_64bkb_U2->din1(layer_output_q1);
    d_sigmoid_dsub_64bkb_U2->ce(ap_var_for_const1);
    d_sigmoid_dsub_64bkb_U2->dout(grp_fu_200_p2);
    d_sigmoid_dmul_64cud_U3 = new d_sigmoid_dmul_64cud<1,5,64,64,64>("d_sigmoid_dmul_64cud_U3");
    d_sigmoid_dmul_64cud_U3->clk(ap_clk);
    d_sigmoid_dmul_64cud_U3->reset(ap_rst);
    d_sigmoid_dmul_64cud_U3->din0(grp_fu_206_p0);
    d_sigmoid_dmul_64cud_U3->din1(grp_fu_206_p1);
    d_sigmoid_dmul_64cud_U3->ce(ap_var_for_const1);
    d_sigmoid_dmul_64cud_U3->dout(grp_fu_206_p2);
    d_sigmoid_dmul_64cud_U4 = new d_sigmoid_dmul_64cud<1,5,64,64,64>("d_sigmoid_dmul_64cud_U4");
    d_sigmoid_dmul_64cud_U4->clk(ap_clk);
    d_sigmoid_dmul_64cud_U4->reset(ap_rst);
    d_sigmoid_dmul_64cud_U4->din0(grp_fu_210_p0);
    d_sigmoid_dmul_64cud_U4->din1(grp_fu_210_p1);
    d_sigmoid_dmul_64cud_U4->ce(ap_var_for_const1);
    d_sigmoid_dmul_64cud_U4->dout(grp_fu_210_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_fu_206_p0);
    sensitive << ( layer_output_load_reg_234 );
    sensitive << ( layer_output_load_2_reg_256 );
    sensitive << ( layer_output_load_4_reg_278 );
    sensitive << ( layer_output_load_6_reg_300 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_206_p1);
    sensitive << ( tmp_reg_312 );
    sensitive << ( tmp_2_reg_322 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_4_reg_332 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_6_reg_342 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_210_p0);
    sensitive << ( layer_output_load_1_reg_240 );
    sensitive << ( layer_output_load_3_reg_262 );
    sensitive << ( layer_output_load_5_reg_284 );
    sensitive << ( layer_output_load_7_reg_306 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_210_p1);
    sensitive << ( tmp_s_reg_317 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_3_reg_327 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_5_reg_337 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_7_reg_347 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_layer_derivative_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_layer_derivative_address1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_layer_derivative_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_layer_derivative_ce1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_layer_derivative_d0);
    sensitive << ( reg_214 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_layer_derivative_d1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( reg_219 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_layer_derivative_we0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_layer_derivative_we1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_layer_input_address0);

    SC_METHOD(thread_layer_input_address1);

    SC_METHOD(thread_layer_input_ce0);

    SC_METHOD(thread_layer_input_ce1);

    SC_METHOD(thread_layer_input_d0);

    SC_METHOD(thread_layer_input_d1);

    SC_METHOD(thread_layer_input_we0);

    SC_METHOD(thread_layer_input_we1);

    SC_METHOD(thread_layer_output_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_layer_output_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_layer_output_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_layer_output_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "d_sigmoid_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, layer_input_address0, "(port)layer_input_address0");
    sc_trace(mVcdFile, layer_input_ce0, "(port)layer_input_ce0");
    sc_trace(mVcdFile, layer_input_we0, "(port)layer_input_we0");
    sc_trace(mVcdFile, layer_input_d0, "(port)layer_input_d0");
    sc_trace(mVcdFile, layer_input_q0, "(port)layer_input_q0");
    sc_trace(mVcdFile, layer_input_address1, "(port)layer_input_address1");
    sc_trace(mVcdFile, layer_input_ce1, "(port)layer_input_ce1");
    sc_trace(mVcdFile, layer_input_we1, "(port)layer_input_we1");
    sc_trace(mVcdFile, layer_input_d1, "(port)layer_input_d1");
    sc_trace(mVcdFile, layer_input_q1, "(port)layer_input_q1");
    sc_trace(mVcdFile, layer_output_address0, "(port)layer_output_address0");
    sc_trace(mVcdFile, layer_output_ce0, "(port)layer_output_ce0");
    sc_trace(mVcdFile, layer_output_q0, "(port)layer_output_q0");
    sc_trace(mVcdFile, layer_output_address1, "(port)layer_output_address1");
    sc_trace(mVcdFile, layer_output_ce1, "(port)layer_output_ce1");
    sc_trace(mVcdFile, layer_output_q1, "(port)layer_output_q1");
    sc_trace(mVcdFile, layer_derivative_address0, "(port)layer_derivative_address0");
    sc_trace(mVcdFile, layer_derivative_ce0, "(port)layer_derivative_ce0");
    sc_trace(mVcdFile, layer_derivative_we0, "(port)layer_derivative_we0");
    sc_trace(mVcdFile, layer_derivative_d0, "(port)layer_derivative_d0");
    sc_trace(mVcdFile, layer_derivative_address1, "(port)layer_derivative_address1");
    sc_trace(mVcdFile, layer_derivative_ce1, "(port)layer_derivative_ce1");
    sc_trace(mVcdFile, layer_derivative_we1, "(port)layer_derivative_we1");
    sc_trace(mVcdFile, layer_derivative_d1, "(port)layer_derivative_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_206_p2, "grp_fu_206_p2");
    sc_trace(mVcdFile, reg_214, "reg_214");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, grp_fu_210_p2, "grp_fu_210_p2");
    sc_trace(mVcdFile, reg_219, "reg_219");
    sc_trace(mVcdFile, layer_output_load_reg_234, "layer_output_load_reg_234");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, layer_output_load_1_reg_240, "layer_output_load_1_reg_240");
    sc_trace(mVcdFile, layer_output_load_2_reg_256, "layer_output_load_2_reg_256");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, layer_output_load_3_reg_262, "layer_output_load_3_reg_262");
    sc_trace(mVcdFile, layer_output_load_4_reg_278, "layer_output_load_4_reg_278");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, layer_output_load_5_reg_284, "layer_output_load_5_reg_284");
    sc_trace(mVcdFile, layer_output_load_6_reg_300, "layer_output_load_6_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, layer_output_load_7_reg_306, "layer_output_load_7_reg_306");
    sc_trace(mVcdFile, grp_fu_194_p2, "grp_fu_194_p2");
    sc_trace(mVcdFile, tmp_reg_312, "tmp_reg_312");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_200_p2, "grp_fu_200_p2");
    sc_trace(mVcdFile, tmp_s_reg_317, "tmp_s_reg_317");
    sc_trace(mVcdFile, tmp_2_reg_322, "tmp_2_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_3_reg_327, "tmp_3_reg_327");
    sc_trace(mVcdFile, tmp_4_reg_332, "tmp_4_reg_332");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_5_reg_337, "tmp_5_reg_337");
    sc_trace(mVcdFile, tmp_6_reg_342, "tmp_6_reg_342");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_7_reg_347, "tmp_7_reg_347");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_206_p0, "grp_fu_206_p0");
    sc_trace(mVcdFile, grp_fu_206_p1, "grp_fu_206_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_fu_210_p0, "grp_fu_210_p0");
    sc_trace(mVcdFile, grp_fu_210_p1, "grp_fu_210_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("d_sigmoid.hdltvin.dat");
    mHdltvoutHandle.open("d_sigmoid.hdltvout.dat");
}

d_sigmoid::~d_sigmoid() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete d_sigmoid_dsub_64bkb_U1;
    delete d_sigmoid_dsub_64bkb_U2;
    delete d_sigmoid_dmul_64cud_U3;
    delete d_sigmoid_dmul_64cud_U4;
}

void d_sigmoid::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void d_sigmoid::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv64_3FF0000000000000;
}

void d_sigmoid::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        layer_output_load_1_reg_240 = layer_output_q1.read();
        layer_output_load_reg_234 = layer_output_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        layer_output_load_2_reg_256 = layer_output_q0.read();
        layer_output_load_3_reg_262 = layer_output_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        layer_output_load_4_reg_278 = layer_output_q0.read();
        layer_output_load_5_reg_284 = layer_output_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        layer_output_load_6_reg_300 = layer_output_q0.read();
        layer_output_load_7_reg_306 = layer_output_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        reg_214 = grp_fu_206_p2.read();
        reg_219 = grp_fu_210_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_2_reg_322 = grp_fu_194_p2.read();
        tmp_3_reg_327 = grp_fu_200_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_4_reg_332 = grp_fu_194_p2.read();
        tmp_5_reg_337 = grp_fu_200_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_6_reg_342 = grp_fu_194_p2.read();
        tmp_7_reg_347 = grp_fu_200_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_reg_312 = grp_fu_194_p2.read();
        tmp_s_reg_317 = grp_fu_200_p2.read();
    }
}

void d_sigmoid::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void d_sigmoid::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void d_sigmoid::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void d_sigmoid::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void d_sigmoid::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void d_sigmoid::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void d_sigmoid::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void d_sigmoid::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void d_sigmoid::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void d_sigmoid::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void d_sigmoid::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void d_sigmoid::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void d_sigmoid::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void d_sigmoid::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void d_sigmoid::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void d_sigmoid::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void d_sigmoid::thread_grp_fu_206_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_206_p0 = layer_output_load_6_reg_300.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_206_p0 = layer_output_load_4_reg_278.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_206_p0 = layer_output_load_2_reg_256.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_206_p0 = layer_output_load_reg_234.read();
    } else {
        grp_fu_206_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void d_sigmoid::thread_grp_fu_206_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_206_p1 = tmp_6_reg_342.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_206_p1 = tmp_4_reg_332.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_206_p1 = tmp_2_reg_322.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_206_p1 = tmp_reg_312.read();
    } else {
        grp_fu_206_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void d_sigmoid::thread_grp_fu_210_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_210_p0 = layer_output_load_7_reg_306.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_210_p0 = layer_output_load_5_reg_284.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_210_p0 = layer_output_load_3_reg_262.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_210_p0 = layer_output_load_1_reg_240.read();
    } else {
        grp_fu_210_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void d_sigmoid::thread_grp_fu_210_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_210_p1 = tmp_7_reg_347.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_210_p1 = tmp_5_reg_337.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_210_p1 = tmp_3_reg_327.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_210_p1 = tmp_s_reg_317.read();
    } else {
        grp_fu_210_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void d_sigmoid::thread_layer_derivative_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        layer_derivative_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        layer_derivative_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        layer_derivative_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        layer_derivative_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        layer_derivative_address0 =  (sc_lv<3>) ("XXX");
    }
}

void d_sigmoid::thread_layer_derivative_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        layer_derivative_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        layer_derivative_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        layer_derivative_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        layer_derivative_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        layer_derivative_address1 =  (sc_lv<3>) ("XXX");
    }
}

void d_sigmoid::thread_layer_derivative_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        layer_derivative_ce0 = ap_const_logic_1;
    } else {
        layer_derivative_ce0 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_derivative_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        layer_derivative_ce1 = ap_const_logic_1;
    } else {
        layer_derivative_ce1 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_derivative_d0() {
    layer_derivative_d0 = reg_214.read();
}

void d_sigmoid::thread_layer_derivative_d1() {
    layer_derivative_d1 = reg_219.read();
}

void d_sigmoid::thread_layer_derivative_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        layer_derivative_we0 = ap_const_logic_1;
    } else {
        layer_derivative_we0 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_derivative_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        layer_derivative_we1 = ap_const_logic_1;
    } else {
        layer_derivative_we1 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_input_address0() {
    layer_input_address0 = ap_const_lv3_0;
}

void d_sigmoid::thread_layer_input_address1() {
    layer_input_address1 = ap_const_lv3_0;
}

void d_sigmoid::thread_layer_input_ce0() {
    layer_input_ce0 = ap_const_logic_0;
}

void d_sigmoid::thread_layer_input_ce1() {
    layer_input_ce1 = ap_const_logic_0;
}

void d_sigmoid::thread_layer_input_d0() {
    layer_input_d0 = ap_const_lv64_0;
}

void d_sigmoid::thread_layer_input_d1() {
    layer_input_d1 = ap_const_lv64_0;
}

void d_sigmoid::thread_layer_input_we0() {
    layer_input_we0 = ap_const_logic_0;
}

void d_sigmoid::thread_layer_input_we1() {
    layer_input_we1 = ap_const_logic_0;
}

void d_sigmoid::thread_layer_output_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        layer_output_address0 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        layer_output_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        layer_output_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        layer_output_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        layer_output_address0 =  (sc_lv<3>) ("XXX");
    }
}

void d_sigmoid::thread_layer_output_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        layer_output_address1 =  (sc_lv<3>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        layer_output_address1 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        layer_output_address1 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        layer_output_address1 =  (sc_lv<3>) (ap_const_lv64_2);
    } else {
        layer_output_address1 =  (sc_lv<3>) ("XXX");
    }
}

void d_sigmoid::thread_layer_output_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        layer_output_ce0 = ap_const_logic_1;
    } else {
        layer_output_ce0 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_layer_output_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        layer_output_ce1 = ap_const_logic_1;
    } else {
        layer_output_ce1 = ap_const_logic_0;
    }
}

void d_sigmoid::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<15>) ("XXXXXXXXXXXXXXX");
            break;
    }
}

void d_sigmoid::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_address0\" :  \"" << layer_input_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_ce0\" :  \"" << layer_input_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_we0\" :  \"" << layer_input_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_d0\" :  \"" << layer_input_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"layer_input_q0\" :  \"" << layer_input_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_address1\" :  \"" << layer_input_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_ce1\" :  \"" << layer_input_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_we1\" :  \"" << layer_input_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_input_d1\" :  \"" << layer_input_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"layer_input_q1\" :  \"" << layer_input_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_output_address0\" :  \"" << layer_output_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_output_ce0\" :  \"" << layer_output_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"layer_output_q0\" :  \"" << layer_output_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_output_address1\" :  \"" << layer_output_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_output_ce1\" :  \"" << layer_output_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"layer_output_q1\" :  \"" << layer_output_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_address0\" :  \"" << layer_derivative_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_ce0\" :  \"" << layer_derivative_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_we0\" :  \"" << layer_derivative_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_d0\" :  \"" << layer_derivative_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_address1\" :  \"" << layer_derivative_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_ce1\" :  \"" << layer_derivative_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_we1\" :  \"" << layer_derivative_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer_derivative_d1\" :  \"" << layer_derivative_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

