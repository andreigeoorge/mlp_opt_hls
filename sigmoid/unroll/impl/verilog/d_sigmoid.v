// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="d_sigmoid,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.253000,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=28,HLS_SYN_FF=2657,HLS_SYN_LUT=3729,HLS_VERSION=2019_2}" *)

module d_sigmoid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer_input_address0,
        layer_input_ce0,
        layer_input_we0,
        layer_input_d0,
        layer_input_q0,
        layer_input_address1,
        layer_input_ce1,
        layer_input_we1,
        layer_input_d1,
        layer_input_q1,
        layer_output_address0,
        layer_output_ce0,
        layer_output_q0,
        layer_output_address1,
        layer_output_ce1,
        layer_output_q1,
        layer_derivative_address0,
        layer_derivative_ce0,
        layer_derivative_we0,
        layer_derivative_d0,
        layer_derivative_address1,
        layer_derivative_ce1,
        layer_derivative_we1,
        layer_derivative_d1
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] layer_input_address0;
output   layer_input_ce0;
output   layer_input_we0;
output  [63:0] layer_input_d0;
input  [63:0] layer_input_q0;
output  [2:0] layer_input_address1;
output   layer_input_ce1;
output   layer_input_we1;
output  [63:0] layer_input_d1;
input  [63:0] layer_input_q1;
output  [2:0] layer_output_address0;
output   layer_output_ce0;
input  [63:0] layer_output_q0;
output  [2:0] layer_output_address1;
output   layer_output_ce1;
input  [63:0] layer_output_q1;
output  [2:0] layer_derivative_address0;
output   layer_derivative_ce0;
output   layer_derivative_we0;
output  [63:0] layer_derivative_d0;
output  [2:0] layer_derivative_address1;
output   layer_derivative_ce1;
output   layer_derivative_we1;
output  [63:0] layer_derivative_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] layer_output_address0;
reg layer_output_ce0;
reg[2:0] layer_output_address1;
reg layer_output_ce1;
reg[2:0] layer_derivative_address0;
reg layer_derivative_ce0;
reg layer_derivative_we0;
reg[2:0] layer_derivative_address1;
reg layer_derivative_ce1;
reg layer_derivative_we1;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_206_p2;
reg   [63:0] reg_214;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [63:0] grp_fu_210_p2;
reg   [63:0] reg_219;
reg   [63:0] layer_output_load_reg_234;
wire    ap_CS_fsm_state2;
reg   [63:0] layer_output_load_1_reg_240;
reg   [63:0] layer_output_load_2_reg_256;
wire    ap_CS_fsm_state3;
reg   [63:0] layer_output_load_3_reg_262;
reg   [63:0] layer_output_load_4_reg_278;
wire    ap_CS_fsm_state4;
reg   [63:0] layer_output_load_5_reg_284;
reg   [63:0] layer_output_load_6_reg_300;
wire    ap_CS_fsm_state5;
reg   [63:0] layer_output_load_7_reg_306;
wire   [63:0] grp_fu_194_p2;
reg   [63:0] tmp_reg_312;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_200_p2;
reg   [63:0] tmp_s_reg_317;
reg   [63:0] tmp_2_reg_322;
wire    ap_CS_fsm_state7;
reg   [63:0] tmp_3_reg_327;
reg   [63:0] tmp_4_reg_332;
wire    ap_CS_fsm_state8;
reg   [63:0] tmp_5_reg_337;
reg   [63:0] tmp_6_reg_342;
wire    ap_CS_fsm_state9;
reg   [63:0] tmp_7_reg_347;
wire    ap_CS_fsm_state15;
reg   [63:0] grp_fu_206_p0;
reg   [63:0] grp_fu_206_p1;
wire    ap_CS_fsm_state10;
reg   [63:0] grp_fu_210_p0;
reg   [63:0] grp_fu_210_p1;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

d_sigmoid_dsub_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
d_sigmoid_dsub_64bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(layer_output_q0),
    .ce(1'b1),
    .dout(grp_fu_194_p2)
);

d_sigmoid_dsub_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
d_sigmoid_dsub_64bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(layer_output_q1),
    .ce(1'b1),
    .dout(grp_fu_200_p2)
);

d_sigmoid_dmul_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
d_sigmoid_dmul_64cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

d_sigmoid_dmul_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
d_sigmoid_dmul_64cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_210_p0),
    .din1(grp_fu_210_p1),
    .ce(1'b1),
    .dout(grp_fu_210_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer_output_load_1_reg_240 <= layer_output_q1;
        layer_output_load_reg_234 <= layer_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        layer_output_load_2_reg_256 <= layer_output_q0;
        layer_output_load_3_reg_262 <= layer_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer_output_load_4_reg_278 <= layer_output_q0;
        layer_output_load_5_reg_284 <= layer_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer_output_load_6_reg_300 <= layer_output_q0;
        layer_output_load_7_reg_306 <= layer_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_214 <= grp_fu_206_p2;
        reg_219 <= grp_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_2_reg_322 <= grp_fu_194_p2;
        tmp_3_reg_327 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_4_reg_332 <= grp_fu_194_p2;
        tmp_5_reg_337 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_6_reg_342 <= grp_fu_194_p2;
        tmp_7_reg_347 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_312 <= grp_fu_194_p2;
        tmp_s_reg_317 <= grp_fu_200_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_206_p0 = layer_output_load_6_reg_300;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_206_p0 = layer_output_load_4_reg_278;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_206_p0 = layer_output_load_2_reg_256;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_206_p0 = layer_output_load_reg_234;
    end else begin
        grp_fu_206_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_206_p1 = tmp_6_reg_342;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_206_p1 = tmp_4_reg_332;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_206_p1 = tmp_2_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_206_p1 = tmp_reg_312;
    end else begin
        grp_fu_206_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_210_p0 = layer_output_load_7_reg_306;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_210_p0 = layer_output_load_5_reg_284;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_210_p0 = layer_output_load_3_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_210_p0 = layer_output_load_1_reg_240;
    end else begin
        grp_fu_210_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_210_p1 = tmp_7_reg_347;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_210_p1 = tmp_5_reg_337;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_210_p1 = tmp_3_reg_327;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_210_p1 = tmp_s_reg_317;
    end else begin
        grp_fu_210_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        layer_derivative_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        layer_derivative_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        layer_derivative_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        layer_derivative_address0 = 64'd0;
    end else begin
        layer_derivative_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        layer_derivative_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        layer_derivative_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        layer_derivative_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        layer_derivative_address1 = 64'd1;
    end else begin
        layer_derivative_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        layer_derivative_ce0 = 1'b1;
    end else begin
        layer_derivative_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        layer_derivative_ce1 = 1'b1;
    end else begin
        layer_derivative_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        layer_derivative_we0 = 1'b1;
    end else begin
        layer_derivative_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        layer_derivative_we1 = 1'b1;
    end else begin
        layer_derivative_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer_output_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        layer_output_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        layer_output_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        layer_output_address0 = 64'd1;
    end else begin
        layer_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer_output_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        layer_output_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        layer_output_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        layer_output_address1 = 64'd2;
    end else begin
        layer_output_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        layer_output_ce0 = 1'b1;
    end else begin
        layer_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        layer_output_ce1 = 1'b1;
    end else begin
        layer_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign layer_derivative_d0 = reg_214;

assign layer_derivative_d1 = reg_219;

assign layer_input_address0 = 3'd0;

assign layer_input_address1 = 3'd0;

assign layer_input_ce0 = 1'b0;

assign layer_input_ce1 = 1'b0;

assign layer_input_d0 = 64'd0;

assign layer_input_d1 = 64'd0;

assign layer_input_we0 = 1'b0;

assign layer_input_we1 = 1'b0;

endmodule //d_sigmoid
